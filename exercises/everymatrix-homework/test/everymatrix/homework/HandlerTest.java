/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package everymatrix.homework;

import everymatrix.homework.handlers.Handler;
import everymatrix.homework.exceptions.NoHandlerFoundException;
import everymatrix.homework.handlers.PostBetHandler;
import everymatrix.homework.handlers.Request;
import org.junit.Assert;
import org.junit.Test;

public class HandlerTest {

    @Test
    public void testChooseHandlerWithGarbageShouldFail() throws Exception {
        Registry registry = new Registry(1000);
        try {
            Request request = new Request("/qweqweqwe", Request.METHOD_GET, null);
            Handler handler = Handler.chooseHandler(registry, request);
            Assert.fail("expected exception");
        } catch (NoHandlerFoundException e) {
            // good
        }

        try {
            Request request = new Request("/qweqweqwe", Request.METHOD_POST, null);
            Handler handler = Handler.chooseHandler(registry, request);
            Assert.fail("expected exception");
        } catch (NoHandlerFoundException e) {
            // good
        }

    }

    @Test
    public void testPostBet() throws Exception {
        Registry registry = new Registry(1000);
        Request request = new Request("/15/stake?sessionkey=qwe234", Request.METHOD_POST, "543");
        Handler handler = Handler.chooseHandler(registry, request);
        assert (handler instanceof PostBetHandler);
        PostBetHandler postBetHandler = (PostBetHandler) handler;
        assert postBetHandler.getBetofferId() == 15;
        assert postBetHandler.getSessionKey() != null;
        assert postBetHandler.getSessionKey().equals("qwe234");
        assert postBetHandler.getStake() == 543;
    }

    @Test
    public void testPostBetWithGetFails() throws Exception {
        Registry registry = new Registry(1000);
        Request request = new Request("/15/stake?sessionkey=qwe234", Request.METHOD_GET, "543");
        try {
            Handler handler = Handler.chooseHandler(registry, request);
            Assert.fail();
        } catch (NoHandlerFoundException e) {
            //good
        }
    }
}