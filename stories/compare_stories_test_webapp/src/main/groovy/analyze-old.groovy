import com.thoughtworks.xstream.XStream//import test.pertinence.story.StoryVersion//import test.pertinence.story.Storyimport groovy.sql.Sql/** * Script to analyze data of the test. * Retrieves comaprison results from database and crunches them */sql = Sql.newInstance(  "jdbc:mysql://localhost/story_comparison_dev", "dadi", "dadi", "com.mysql.jdbc.Driver")cache_filename = "/tmp/responses-cache.xml"results = new TreeSet()if (new File(cache_filename).exists()) {	println "reading cached responses from $cache_filename"	results = new XStream().fromXML(new File(cache_filename).text)} else {	results = retrieveResultsFromDatabase()}// bijection : story versions get assigned a unique index so we can build a matrix sv2idx = [:]idx2sv = [:]index = 0results.each {	crtStory = it	crtStory.versions.each { key, value ->		idx2sv[index] = value		sv2idx[value] = index		index ++	}}nr_versions = indexsv2idx.each {key, value ->	println "$key => $value"}matrix = []for (i in 0..<nr_versions) {	ver_left = idx2sv[i]	matrix[i] = []	for (j in 0..<nr_versions) {		if (matrix[j] == null) matrix[j] = [] 		ver_right = idx2sv[j]		avg = get_avg_comp_res(ver_left, ver_right)		matrix[i][j] = avg		matrix[j][i] = 100 - avg	}}matrix.each {	println()	it.each {		print "$it ,"	}}def get_avg_comp_res(left_story_version, right_story_version) {	lvid = left_story_version.id	lid = left_story_version.story.id	rvid = right_story_version.id	rid = right_story_version.story.id		comp_res = 0	nr_results = 0		print "comparisons between $lid/$lvid <-> $rid/$rvid :"		query = """	SELECT `comparisonValue` as compval		FROM `ComparisonResult`		where  `leftStoryId` = ?		and `leftStoryVersionId` = ?		and `rightStoryId`= ?		and `rightStoryVersionId` = ?"""					sql.eachRow(query, 				[lid, lvid, rid, rvid], 				{ 					nr_results ++					crt_res = it.compval					comp_res += crt_res					print "$crt_res,"				} 	);	println ""		if (comp_res == 0)		return 0	else		return comp_res / nr_results}/* * selects from database */def retrieveResultsFromDatabase() {		println "retrieving results from database ..."	sql.eachRow("select distinct(leftStoryId) as id from ComparisonResult", { results << new test.pertinence.story.Story(it.id) } );	sql.eachRow("select distinct(rightStoryId) as id from ComparisonResult", { results << new test.pertinence.story.Story(it.id) } );		results.each() {		crtStory = it;		crtStoryId = it.id;				closure = {			int crtVerId = it.id 			sv = new test.pertinence.story.StoryVersion(crtStory, crtVerId)			if (! crtStory.hasVersion(crtVerId))				crtStory.addVersion(sv)		}			sql.eachRow("SELECT distinct(`leftStoryVersionId`) as id FROM `ComparisonResult` where `leftStoryId` = ?",			[crtStoryId],			closure		);			sql.eachRow("SELECT distinct(`rightStoryVersionId`) as id FROM `ComparisonResult` where `rightStoryId` = ?",			[crtStoryId],			closure		);	}		xml = new XStream().toXML(results)	new File(cache_filename).write(xml)	return results}