import pertinence.cognibox.years.MathYearCodecimport pertinence.cognibox.years.LitteralYearCodecimport pertinence.cognibox.huffman.HuffmanTreeclass AreTwoDistantLandmarksReallyMoreEconomical {	Map litt_enc_years_map = [:] // litteral encoding does not change so compute it once and for all here	def year_range = 1000..1300	public AreTwoDistantLandmarksReallyMoreEconomical() {				def litt_landmarks = [ : ]		def litt_hufftree = new HuffmanTree(litt_landmarks)		LitteralYearCodec litt_codec = new LitteralYearCodec(litt_hufftree)		year_range.each { litt_enc_years_map[it] = litt_codec.encode(it) }			} 	def run() {				def best_landmark = null		def minimum_code_length_sum = Integer.MAX_VALUE			def len1 = calculateTotalSumForLandmarks ( [ 1000 : 1, 1001 : 1] )		def len2 = calculateTotalSumForLandmarks ( [ 1000 : 1, 1100 : 1] )				println len1 > len2 ? "yes" : "no";		//println "best candidate : $best_landmark with length sum : $minimum_code_length_sum, #landmarks = ${math_landmarks.size()}"	}	int calculateTotalSumForLandmarks (Map landmarks) {		println "=" * 40		println "landmarks : $landmarks"		def math_landmarks = landmarks		def math_hufftree = new HuffmanTree(math_landmarks)		MathYearCodec math_codec = new MathYearCodec(math_hufftree, 15)		long code_length_sum = 0				for (year in year_range) {			def math_codes = math_codec.encode(year)			def litt_codes = litt_enc_years_map[year]			//println "$year -> $math_codes , $litt_codes"						List all_encodings = []			math_codes.each {all_encodings << it }			litt_codes.each {all_encodings << it }			def score = this.calculateScore(all_encodings)						code_length_sum += score		}				println "for landmarks $math_landmarks, total code size is $code_length_sum"		println "=" * 40		return code_length_sum	}			def calculateScore(List encodings) {		//float score = 0.0		int score = Integer.MAX_VALUE		encodings.each {			if (it.length() < score)				score = it.length()		}		return score	}}def mainclass = new AreTwoDistantLandmarksReallyMoreEconomical()mainclass.run()